name: Build and upload to PyPI

# Build on every branch push, tag push, and pull request change:
on: push

jobs:
  build_wheels:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 2
      matrix:
        os: [ubuntu-18.04, macos-latest]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.6'

      - name: macOS - Prepare MacPorts - Prefer Xcode 11.5
        if: ${{ runner.os == 'macOS' }}
        run: |
          xcode-select -p
          xcodebuild -version
          sudo xcode-select -s /Applications/Xcode_11.5.app/Contents/Developer
          xcodebuild -version

      - name: macOS - Cache MacPorts and OpenCV dependencies for macOS
        if: ${{ runner.os == 'macOS' }}
        uses: actions/cache@v2
        env:
          cache-name: cache-opencv
        with:
          path: |
            /opt/local
            /opt/opencv
          # The key based on the file hash of the build script
          # i.e. changing OPENCV_VERSION within the script will invalidate the cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-macports-v1.0.0-${{ hashFiles('scripts/_install_opencv_*_on_macos.sh') }}

      - name: Check MacPorts existence
        id: check_macports
        uses: andstor/file-existence-action@v1
        with:
          files: "/opt/local"

      - name: macOS - Install MacPorts
        if: ${{ runner.os == 'macOS' && steps.check_macports.outputs.files_exists == 'false' }}
        uses: WildbookOrg/wbia-pypkg-build/actions/macports@v1.0.0

      - name: Release - Autobump version preparation
        if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
        run: |
          # from refs/tags/vX.Y.Z get X.Y.Z
          echo ${GITHUB_REF}
          VERSION=$(echo ${GITHUB_REF} | sed 's#.*/v##')
          PLACEHOLDER="__version__ = '.*'"
          VERSION_FILE="vtool/__init__.py"

          grep "${PLACEHOLDER}" "${VERSION_FILE}"
        shell: bash

      - name: Release macOS - Autobump version for Mac
        if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') && runner.os == 'macOS' }}
        run: |
          sed -i "" "s/${PLACEHOLDER}/__version__ = \'${VERSION}\'/g" "${VERSION_FILE}"
        shell: bash

      - name: Release Linux - Autobump version for Linux
        if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') && runner.os == 'Linux' }}
        run: |
          sed -i "s/${PLACEHOLDER}/__version__ = \'${VERSION}\'/g" "${VERSION_FILE}"
        shell: bash

      - name: Build wheels
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: wildme/manylinux:latest
          CIBW_BUILD: cp36-manylinux_x86_64 cp36-macosx_x86_64
          CIBW_BEFORE_BUILD_LINUX: bash scripts/ci_prepare_centos_for_build.sh
          CIBW_BEFORE_BUILD_MACOS: bash scripts/ci_prepare_macos_for_build.sh
        run: |
          python -m pip install cibuildwheel==1.4.2
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.6'

      - name: Build sdist
        run: |
          pip install scikit-build
          python setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
